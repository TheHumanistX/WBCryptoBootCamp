{
	"id": "537b0a3eb41155aa5fe3a6c44c151487",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.13",
	"solcLongVersion": "0.8.13+commit.abaa5c0e",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Practice/KYC_ID/KycId.sol": {
				"content": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.13;\r\n\r\n// There are times where it is not necessary to share your entire identity (especially home address) when verifying your identity\r\n// with a business or institution.  It would be nice to be able to share only what is needed to avoid oversharing of information.\r\n// This idea springs from reports in the past of women giving their identification at bars or different events and someone \r\n// copies down their name and address and then stalks them. Sad but very real risk.\r\n\r\n// The reason blockchain would be a good use of this is the immutability and verification abilities so that a person could, for\r\n// instance, share only their photo and date of birth and it is verified as accurate and real by the blockchain (through some\r\n// official institution (government), whereas with hardcopy identification, it could be faked.  Businesses could know that \r\n// the information they are seeing is valid, accurate, and official without worry of fraudulant identification.\r\n\r\n// We will begin only utilizing the structure of identification via drivers license in the United States\r\n\r\n//  Items typically on ID and requested by various institutions/businesses\r\n    // License Number, Issue Date, Expiry Date, First Name, Last Name, Date of Birth, Photo, Address (broken down to address \r\n    // number, street, city, state, zip code), License Class (M, C, B, A), Organ Donor (Y, N), Restrictions, Sex, Eyes, Hair, \r\n    // Height, Race, Signature(necessary?), DD (the only number on the license guarunteed to be unique, this number is unique \r\n    // per actual license issued... may not be needed in same manner but will see as we move forward)\r\n\r\n// The visual aspect of the license would, of course, be an NFT. This would make it one-of-a-kind and immutable. \r\n\r\ncontract kycId {\r\n\r\n    \r\n\r\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/Practice/KYC_ID/KycId.sol": {
				"kycId": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Practice/KYC_ID/KycId.sol\":1820:1849  contract kycId {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Practice/KYC_ID/KycId.sol\":1820:1849  contract kycId {... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220888411b4189afba9eb0c986e2f03255d53869e383df27aa3a9b3749129e783a464736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220888411b4189afba9eb0c986e2f03255d53869e383df27aa3a9b3749129e783a464736f6c634300080d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP9 DUP5 GT 0xB4 XOR SWAP11 0xFB 0xA9 0xEB 0xC SWAP9 PUSH15 0x2F03255D53869E383DF27AA3A9B374 SWAP2 0x29 0xE7 DUP4 LOG4 PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "1820:29:0:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600080fdfea2646970667358221220888411b4189afba9eb0c986e2f03255d53869e383df27aa3a9b3749129e783a464736f6c634300080d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP9 DUP5 GT 0xB4 XOR SWAP11 0xFB 0xA9 0xEB 0xC SWAP9 PUSH15 0x2F03255D53869E383DF27AA3A9B374 SWAP2 0x29 0xE7 DUP4 LOG4 PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "1820:29:0:-:0;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "12600",
								"executionCost": "66",
								"totalCost": "12666"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1820,
									"end": 1849,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 1820,
									"end": 1849,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1820,
									"end": 1849,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1820,
									"end": 1849,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 1820,
									"end": 1849,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1820,
									"end": 1849,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 1820,
									"end": 1849,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1820,
									"end": 1849,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1820,
									"end": 1849,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1820,
									"end": 1849,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1820,
									"end": 1849,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 1820,
									"end": 1849,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1820,
									"end": 1849,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1820,
									"end": 1849,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 1820,
									"end": 1849,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1820,
									"end": 1849,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1820,
									"end": 1849,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1820,
									"end": 1849,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1820,
									"end": 1849,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 1820,
									"end": 1849,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1820,
									"end": 1849,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220888411b4189afba9eb0c986e2f03255d53869e383df27aa3a9b3749129e783a464736f6c634300080d0033",
									".code": [
										{
											"begin": 1820,
											"end": 1849,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 1820,
											"end": 1849,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1820,
											"end": 1849,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1820,
											"end": 1849,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1820,
											"end": 1849,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1820,
											"end": 1849,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Practice/KYC_ID/KycId.sol\":\"kycId\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Practice/KYC_ID/KycId.sol\":{\"keccak256\":\"0x9e65c4653a5df7901e00408c6062fe17b76ea33b2942e449653b2e2ffd9bb889\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c303714319d989a02bace7bde8e5e0b454a28b5d64f8291e35e5473fae9889f3\",\"dweb:/ipfs/QmRoZWadbzMTJA5UH4wGARcjF1ymKiRXRm5GV6NC18h3uD\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/Practice/KYC_ID/KycId.sol": {
				"ast": {
					"absolutePath": "contracts/Practice/KYC_ID/KycId.sol",
					"exportedSymbols": {
						"kycId": [
							2
						]
					},
					"id": 3,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "34:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "kycId",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 2,
							"linearizedBaseContracts": [
								2
							],
							"name": "kycId",
							"nameLocation": "1829:5:0",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 3,
							"src": "1820:29:0",
							"usedErrors": []
						}
					],
					"src": "34:1815:0"
				},
				"id": 0
			}
		}
	}
}